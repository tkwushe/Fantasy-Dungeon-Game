name: Deploy to Web

on:
  push:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build-web:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 19
      uses: actions/setup-java@v4
      with:
        java-version: '19'
        distribution: 'temurin'
        
    - name: Cache Maven packages
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Build with Maven
      run: mvn clean compile package -DskipTests
      
    - name: Create web directory
      run: mkdir -p web
      
    - name: Copy JAR for web deployment
      run: cp target/fantasy-dungeon-adventure-1.0-SNAPSHOT-standalone.jar web/
      
    - name: Create CheerpJ web page
      run: |
        cat > web/index.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Fantasy Dungeon Adventure - Play in Browser</title>
            <script src="https://cjrtnc.leaningtech.com/2.3/loader.js"></script>
            <style>
                body {
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    margin: 0;
                    padding: 20px;
                    background: linear-gradient(135deg, #1e3c72 0%, #2a5298 100%);
                    color: white;
                    min-height: 100vh;
                }
                .container {
                    max-width: 1200px;
                    margin: 0 auto;
                    text-align: center;
                }
                .header {
                    margin-bottom: 30px;
                }
                .header h1 {
                    font-size: 2.5em;
                    margin-bottom: 10px;
                    text-shadow: 2px 2px 4px rgba(0,0,0,0.5);
                }
                .header p {
                    font-size: 1.2em;
                    opacity: 0.9;
                }
                .game-container {
                    background: rgba(0, 0, 0, 0.3);
                    border-radius: 10px;
                    padding: 20px;
                    margin: 20px 0;
                    backdrop-filter: blur(10px);
                }
                .loading {
                    color: #00ff00;
                    font-size: 1.1em;
                    margin: 20px 0;
                }
                .instructions {
                    text-align: left;
                    background: rgba(255, 255, 255, 0.1);
                    padding: 20px;
                    border-radius: 5px;
                    margin: 20px 0;
                }
                .instructions h3 {
                    color: #00ff00;
                    margin-top: 0;
                }
                .instructions ul {
                    margin: 10px 0;
                }
                .instructions li {
                    margin: 5px 0;
                }
                .controls {
                    display: grid;
                    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                    gap: 10px;
                    margin: 20px 0;
                }
                .control-group {
                    background: rgba(255, 255, 255, 0.1);
                    padding: 15px;
                    border-radius: 5px;
                }
                .control-group h4 {
                    color: #00ff00;
                    margin-top: 0;
                    margin-bottom: 10px;
                }
                .fallback {
                    background: rgba(255, 255, 255, 0.1);
                    padding: 20px;
                    border-radius: 5px;
                    margin: 20px 0;
                }
                .download-btn {
                    display: inline-block;
                    background: #00ff00;
                    color: #000;
                    padding: 12px 24px;
                    text-decoration: none;
                    border-radius: 5px;
                    font-weight: bold;
                    margin: 10px;
                    transition: background 0.3s;
                }
                .download-btn:hover {
                    background: #00cc00;
                }
                .error {
                    color: #ff6b6b;
                    background: rgba(255, 107, 107, 0.1);
                    padding: 15px;
                    border-radius: 5px;
                    margin: 10px 0;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üè∞ Fantasy Dungeon Adventure</h1>
                    <p>Play the Java game directly in your browser!</p>
                </div>
                
                <div class="game-container">
                    <div class="loading" id="loadingMsg">
                        üéÆ Loading game... This may take a few moments.
                    </div>
                    <div id="gameArea"></div>
                    <div class="error" id="errorMsg" style="display: none;">
                        ‚ùå Failed to load the game. Please try the downloadable version below.
                    </div>
                </div>
                
                <div class="instructions">
                    <h3>üéØ How to Play</h3>
                    <div class="controls">
                        <div class="control-group">
                            <h4>Movement</h4>
                            <ul>
                                <li><code>north</code> or <code>n</code> - Go north</li>
                                <li><code>south</code> or <code>s</code> - Go south</li>
                                <li><code>east</code> or <code>e</code> - Go east</li>
                                <li><code>west</code> or <code>w</code> - Go west</li>
                            </ul>
                        </div>
                        <div class="control-group">
                            <h4>Interaction</h4>
                            <ul>
                                <li><code>look</code> - Examine surroundings</li>
                                <li><code>pickup [item]</code> - Collect items</li>
                                <li><code>inventory</code> - Check your items</li>
                                <li><code>use [item]</code> - Use an item</li>
                            </ul>
                        </div>
                        <div class="control-group">
                            <h4>Game Actions</h4>
                            <ul>
                                <li><code>solve</code> - Attempt puzzles</li>
                                <li><code>save</code> - Save your progress</li>
                                <li><code>load</code> - Load saved game</li>
                                <li><code>help</code> - Show all commands</li>
                            </ul>
                        </div>
                    </div>
                    <p><strong>üí° Tip:</strong> Start by typing <code>look</code> to see your surroundings, then <code>help</code> for all available commands!</p>
                </div>
                
                <div class="fallback">
                    <h3>üì• Alternative Download Options</h3>
                    <p>If the web version doesn't work, download the game for your platform:</p>
                    <a href="../../releases/latest" class="download-btn">üñ•Ô∏è Download for Windows/Mac/Linux</a>
                    <p><small>Requires Java 19+</small></p>
                </div>
            </div>
            
            <script>
                async function loadGame() {
                    try {
                        const loadingMsg = document.getElementById('loadingMsg');
                        const gameArea = document.getElementById('gameArea');
                        const errorMsg = document.getElementById('errorMsg');
                        
                        loadingMsg.textContent = 'üîÑ Initializing CheerpJ...';
                        
                        // Initialize CheerpJ
                        await cheerpjInit();
                        
                        loadingMsg.textContent = 'üì¶ Loading game JAR...';
                        
                        // Run the game
                        await cheerpjRunJar("fantasy-dungeon-adventure-1.0-SNAPSHOT-standalone.jar");
                        
                        loadingMsg.style.display = 'none';
                        
                    } catch (error) {
                        console.error('Error loading game:', error);
                        document.getElementById('loadingMsg').style.display = 'none';
                        document.getElementById('errorMsg').style.display = 'block';
                    }
                }
                
                // Start loading when page is ready
                if (document.readyState === 'loading') {
                    document.addEventListener('DOMContentLoaded', loadGame);
                } else {
                    loadGame();
                }
            </script>
        </body>
        </html>
        EOF
        
    - name: Create simple HTML5 game version
      run: |
        cat > web/simple.html << 'EOF'
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Fantasy Dungeon Adventure - HTML5 Version</title>
            <style>
                body {
                    font-family: 'Courier New', monospace;
                    background: #000;
                    color: #00ff00;
                    margin: 0;
                    padding: 20px;
                    min-height: 100vh;
                }
                .container {
                    max-width: 1000px;
                    margin: 0 auto;
                }
                .header {
                    text-align: center;
                    margin-bottom: 20px;
                    border-bottom: 2px solid #00ff00;
                    padding-bottom: 10px;
                }
                .game-area {
                    display: grid;
                    grid-template-columns: 1fr 300px;
                    gap: 20px;
                    min-height: 600px;
                }
                .main-panel {
                    background: #001100;
                    border: 2px solid #00ff00;
                    padding: 15px;
                    border-radius: 5px;
                }
                .side-panel {
                    background: #001100;
                    border: 2px solid #00ff00;
                    padding: 15px;
                    border-radius: 5px;
                }
                .output {
                    height: 400px;
                    overflow-y: auto;
                    background: #000;
                    border: 1px solid #00ff00;
                    padding: 10px;
                    margin-bottom: 10px;
                    white-space: pre-wrap;
                    font-size: 14px;
                    line-height: 1.4;
                }
                .input-area {
                    display: flex;
                    gap: 10px;
                }
                .input-area input {
                    flex: 1;
                    background: #000;
                    border: 1px solid #00ff00;
                    color: #00ff00;
                    padding: 10px;
                    font-family: 'Courier New', monospace;
                    font-size: 14px;
                }
                .input-area button {
                    background: #00ff00;
                    color: #000;
                    border: none;
                    padding: 10px 20px;
                    cursor: pointer;
                    font-weight: bold;
                }
                .input-area button:hover {
                    background: #00cc00;
                }
                .status-panel, .inventory-panel, .map-panel {
                    margin-bottom: 15px;
                    border: 1px solid #00ff00;
                    padding: 10px;
                }
                .status-panel h3, .inventory-panel h3, .map-panel h3 {
                    margin: 0 0 10px 0;
                    color: #00ff00;
                    border-bottom: 1px solid #00ff00;
                    padding-bottom: 5px;
                }
                .health-bar {
                    background: #330000;
                    border: 1px solid #00ff00;
                    height: 20px;
                    margin: 5px 0;
                }
                .health-fill {
                    background: #00ff00;
                    height: 100%;
                    transition: width 0.3s;
                }
                .map-grid {
                    display: grid;
                    grid-template-columns: repeat(5, 30px);
                    gap: 2px;
                    justify-content: center;
                }
                .map-cell {
                    width: 30px;
                    height: 30px;
                    border: 1px solid #333;
                    display: flex;
                    align-items: center;
                    justify-content: center;
                    font-size: 12px;
                }
                .map-cell.visited {
                    background: #003300;
                    border-color: #00ff00;
                }
                .map-cell.current {
                    background: #00ff00;
                    color: #000;
                }
                .map-cell.treasure {
                    background: #ff6600;
                    color: #fff;
                }
                .inventory-item {
                    background: #002200;
                    border: 1px solid #00ff00;
                    padding: 5px;
                    margin: 2px 0;
                    cursor: pointer;
                }
                .inventory-item:hover {
                    background: #003300;
                }
                @media (max-width: 768px) {
                    .game-area {
                        grid-template-columns: 1fr;
                    }
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>üè∞ Fantasy Dungeon Adventure</h1>
                    <p>HTML5 Browser Version</p>
                </div>
                
                <div class="game-area">
                    <div class="main-panel">
                        <div class="output" id="gameOutput">Welcome to Fantasy Dungeon Adventure!
        
        You find yourself at the entrance of an ancient dungeon...
        
        Choose your difficulty:
        1. Easy (100 HP, more items)
        2. Normal (75 HP, balanced)  
        3. Hard (150 HP, challenging)
        
        Type a number (1-3) to begin!</div>
                        <div class="input-area">
                            <input type="text" id="gameInput" placeholder="Enter command..." autofocus>
                            <button onclick="processCommand()">Send</button>
                        </div>
                    </div>
                    
                    <div class="side-panel">
                        <div class="status-panel">
                            <h3>üìä Status</h3>
                            <div>Health: <span id="health">100</span> HP</div>
                            <div class="health-bar">
                                <div class="health-fill" id="healthBar" style="width: 100%"></div>
                            </div>
                            <div>Location: <span id="location">Entrance</span></div>
                            <div>Difficulty: <span id="difficulty">Not Set</span></div>
                        </div>
                        
                        <div class="inventory-panel">
                            <h3>üéí Inventory</h3>
                            <div id="inventory">No items</div>
                        </div>
                        
                        <div class="map-panel">
                            <h3>üó∫Ô∏è Map</h3>
                            <div class="map-grid" id="mapGrid">
                                <div class="map-cell current">@</div>
                                <div class="map-cell"></div>
                                <div class="map-cell"></div>
                                <div class="map-cell"></div>
                                <div class="map-cell"></div>
                                <div class="map-cell"></div>
                                <div class="map-cell"></div>
                                <div class="map-cell"></div>
                                <div class="map-cell"></div>
                                <div class="map-cell"></div>
                                <div class="map-cell"></div>
                                <div class="map-cell"></div>
                                <div class="map-cell"></div>
                                <div class="map-cell"></div>
                                <div class="map-cell"></div>
                                <div class="map-cell"></div>
                                <div class="map-cell"></div>
                                <div class="map-cell"></div>
                                <div class="map-cell"></div>
                                <div class="map-cell"></div>
                                <div class="map-cell"></div>
                                <div class="map-cell"></div>
                                <div class="map-cell"></div>
                                <div class="map-cell"></div>
                                <div class="map-cell"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            
            <script src="simple-game.js"></script>
        </body>
        </html>
        EOF
        
    - name: Create simple game JavaScript
      run: |
        cat > web/simple-game.js << 'EOF'
        // Simple HTML5 version of Fantasy Dungeon Adventure
        class SimpleGame {
            constructor() {
                this.state = 'difficulty';
                this.health = 100;
                this.maxHealth = 100;
                this.difficulty = null;
                this.currentRoom = { x: 0, y: 0, name: 'Entrance' };
                this.inventory = [];
                this.visitedRooms = new Set(['0,0']);
                this.rooms = this.generateRooms();
                this.treasureRoom = { x: 2, y: 2 };
                
                document.getElementById('gameInput').addEventListener('keypress', (e) => {
                    if (e.key === 'Enter') {
                        this.processCommand();
                    }
                });
            }
            
            generateRooms() {
                const rooms = {};
                const descriptions = [
                    'a dark chamber with stone walls',
                    'a mysterious room with ancient markings', 
                    'a dimly lit corridor',
                    'a room filled with cobwebs',
                    'a chamber with flickering torches'
                ];
                
                for (let x = -2; x <= 2; x++) {
                    for (let y = -2; y <= 2; y++) {
                        const key = `${x},${y}`;
                        rooms[key] = {
                            description: descriptions[Math.floor(Math.random() * descriptions.length)],
                            items: Math.random() < 0.3 ? [this.generateRandomItem()] : [],
                            puzzle: Math.random() < 0.2 ? this.generatePuzzle() : null,
                            visited: false
                        };
                    }
                }
                
                // Special rooms
                rooms['2,2'] = {
                    description: 'the legendary treasure chamber!',
                    items: ['Golden Treasure', 'Ancient Artifact'],
                    puzzle: null,
                    visited: false,
                    treasure: true
                };
                
                return rooms;
            }
            
            generateRandomItem() {
                const items = [
                    'Health Potion', 'Magic Scroll', 'Ancient Key', 'Torch',
                    'Healing Herbs', 'Energy Crystal', 'Mystic Rune'
                ];
                return items[Math.floor(Math.random() * items.length)];
            }
            
            generatePuzzle() {
                const puzzles = [
                    { question: 'What is 5 + 7?', answer: '12' },
                    { question: 'What color rhymes with "bed"?', answer: 'red' },
                    { question: 'How many sides does a triangle have?', answer: '3' }
                ];
                return puzzles[Math.floor(Math.random() * puzzles.length)];
            }
            
            processCommand() {
                const input = document.getElementById('gameInput').value.trim().toLowerCase();
                document.getElementById('gameInput').value = '';
                
                if (!input) return;
                
                this.addOutput(`> ${input}`);
                
                if (this.state === 'difficulty') {
                    this.handleDifficultySelection(input);
                } else {
                    this.handleGameCommand(input);
                }
                
                this.updateUI();
            }
            
            handleDifficultySelection(input) {
                if (input === '1') {
                    this.difficulty = 'Easy';
                    this.health = this.maxHealth = 100;
                    this.addOutput('Difficulty set to Easy. You start with 100 HP.');
                } else if (input === '2') {
                    this.difficulty = 'Normal';
                    this.health = this.maxHealth = 75;
                    this.addOutput('Difficulty set to Normal. You start with 75 HP.');
                } else if (input === '3') {
                    this.difficulty = 'Hard';
                    this.health = this.maxHealth = 150;
                    this.addOutput('Difficulty set to Hard. You start with 150 HP.');
                } else {
                    this.addOutput('Please enter 1, 2, or 3.');
                    return;
                }
                
                this.state = 'playing';
                this.addOutput('\nüéÆ Game started! Type "help" for commands.');
                this.addOutput('\nYou are in ' + this.rooms['0,0'].description);
                this.addOutput('Available exits: north, east');
            }
            
            handleGameCommand(input) {
                const parts = input.split(' ');
                const command = parts[0];
                const args = parts.slice(1).join(' ');
                
                switch (command) {
                    case 'help':
                        this.showHelp();
                        break;
                    case 'look':
                        this.look();
                        break;
                    case 'north': case 'n':
                        this.move(0, -1);
                        break;
                    case 'south': case 's':
                        this.move(0, 1);
                        break;
                    case 'east': case 'e':
                        this.move(1, 0);
                        break;
                    case 'west': case 'w':
                        this.move(-1, 0);
                        break;
                    case 'inventory': case 'inv':
                        this.showInventory();
                        break;
                    case 'pickup': case 'take':
                        this.pickup(args);
                        break;
                    case 'use':
                        this.useItem(args);
                        break;
                    case 'solve':
                        this.solvePuzzle(args);
                        break;
                    default:
                        this.addOutput('Unknown command. Type "help" for available commands.');
                }
            }
            
            move(dx, dy) {
                const newX = this.currentRoom.x + dx;
                const newY = this.currentRoom.y + dy;
                const newKey = `${newX},${newY}`;
                
                if (Math.abs(newX) > 2 || Math.abs(newY) > 2) {
                    this.addOutput('You cannot go that way.');
                    return;
                }
                
                this.currentRoom = { x: newX, y: newY };
                this.visitedRooms.add(newKey);
                
                const room = this.rooms[newKey];
                this.addOutput(`\nYou move to ${room.description}`);
                
                if (room.treasure) {
                    this.addOutput('üèÜ CONGRATULATIONS! You found the treasure chamber!');
                    this.addOutput('You have completed the dungeon adventure!');
                }
                
                this.look();
            }
            
            look() {
                const key = `${this.currentRoom.x},${this.currentRoom.y}`;
                const room = this.rooms[key];
                
                this.addOutput(`\nYou are in ${room.description}`);
                
                if (room.items.length > 0) {
                    this.addOutput('Items here: ' + room.items.join(', '));
                }
                
                if (room.puzzle) {
                    this.addOutput('üß© There is a puzzle here: ' + room.puzzle.question);
                }
                
                // Show available exits
                const exits = [];
                if (this.currentRoom.y > -2) exits.push('north');
                if (this.currentRoom.y < 2) exits.push('south');
                if (this.currentRoom.x > -2) exits.push('west');
                if (this.currentRoom.x < 2) exits.push('east');
                
                this.addOutput('Exits: ' + exits.join(', '));
            }
            
            pickup(itemName) {
                if (!itemName) {
                    this.addOutput('What do you want to pick up?');
                    return;
                }
                
                const key = `${this.currentRoom.x},${this.currentRoom.y}`;
                const room = this.rooms[key];
                const itemIndex = room.items.findIndex(item => 
                    item.toLowerCase().includes(itemName.toLowerCase())
                );
                
                if (itemIndex === -1) {
                    this.addOutput(`There is no ${itemName} here.`);
                    return;
                }
                
                const item = room.items.splice(itemIndex, 1)[0];
                this.inventory.push(item);
                this.addOutput(`You picked up: ${item}`);
            }
            
            useItem(itemName) {
                if (!itemName) {
                    this.addOutput('What do you want to use?');
                    return;
                }
                
                const itemIndex = this.inventory.findIndex(item => 
                    item.toLowerCase().includes(itemName.toLowerCase())
                );
                
                if (itemIndex === -1) {
                    this.addOutput(`You don't have a ${itemName}.`);
                    return;
                }
                
                const item = this.inventory[itemIndex];
                
                if (item.toLowerCase().includes('potion') || item.toLowerCase().includes('herbs')) {
                    const heal = Math.floor(Math.random() * 30) + 20;
                    this.health = Math.min(this.maxHealth, this.health + heal);
                    this.inventory.splice(itemIndex, 1);
                    this.addOutput(`You used ${item} and restored ${heal} health!`);
                } else {
                    this.addOutput(`You used ${item}.`);
                }
            }
            
            solvePuzzle(answer) {
                const key = `${this.currentRoom.x},${this.currentRoom.y}`;
                const room = this.rooms[key];
                
                if (!room.puzzle) {
                    this.addOutput('There is no puzzle here.');
                    return;
                }
                
                if (!answer) {
                    this.addOutput('Puzzle: ' + room.puzzle.question);
                    this.addOutput('Use "solve [answer]" to submit your answer.');
                    return;
                }
                
                if (answer.toLowerCase() === room.puzzle.answer.toLowerCase()) {
                    this.addOutput('üéâ Correct! You solved the puzzle!');
                    this.health = Math.min(this.maxHealth, this.health + 15);
                    this.addOutput('You gain 15 health points as a reward!');
                    room.puzzle = null;
                } else {
                    this.addOutput('‚ùå That\'s not correct. Try again!');
                    this.health = Math.max(0, this.health - 5);
                    this.addOutput('You lose 5 health points.');
                }
            }
            
            showInventory() {
                if (this.inventory.length === 0) {
                    this.addOutput('Your inventory is empty.');
                } else {
                    this.addOutput('Inventory: ' + this.inventory.join(', '));
                }
            }
            
            showHelp() {
                this.addOutput(`
        Available Commands:
        ‚Ä¢ look - examine your surroundings
        ‚Ä¢ north/south/east/west (or n/s/e/w) - move around
        ‚Ä¢ pickup [item] - collect an item
        ‚Ä¢ use [item] - use an item from inventory
        ‚Ä¢ inventory - show your items
        ‚Ä¢ solve [answer] - answer a puzzle
        ‚Ä¢ help - show this help
        
        Goal: Find the treasure chamber at coordinates (2,2)!`);
            }
            
            addOutput(text) {
                const output = document.getElementById('gameOutput');
                output.textContent += '\n' + text;
                output.scrollTop = output.scrollHeight;
            }
            
            updateUI() {
                // Update health
                document.getElementById('health').textContent = this.health;
                const healthPercent = (this.health / this.maxHealth) * 100;
                document.getElementById('healthBar').style.width = healthPercent + '%';
                
                if (healthPercent < 25) {
                    document.getElementById('healthBar').style.background = '#ff0000';
                } else if (healthPercent < 50) {
                    document.getElementById('healthBar').style.background = '#ffff00';
                } else {
                    document.getElementById('healthBar').style.background = '#00ff00';
                }
                
                // Update location
                document.getElementById('location').textContent = 
                    `(${this.currentRoom.x},${this.currentRoom.y})`;
                
                // Update difficulty
                document.getElementById('difficulty').textContent = this.difficulty || 'Not Set';
                
                // Update inventory
                const invDiv = document.getElementById('inventory');
                if (this.inventory.length === 0) {
                    invDiv.innerHTML = 'No items';
                } else {
                    invDiv.innerHTML = this.inventory.map(item => 
                        `<div class="inventory-item" onclick="game.useItem('${item}')">${item}</div>`
                    ).join('');
                }
                
                // Update map
                this.updateMap();
            }
            
            updateMap() {
                const cells = document.querySelectorAll('.map-cell');
                cells.forEach((cell, index) => {
                    const x = (index % 5) - 2;
                    const y = Math.floor(index / 5) - 2;
                    const key = `${x},${y}`;
                    
                    cell.className = 'map-cell';
                    cell.textContent = '';
                    
                    if (this.visitedRooms.has(key)) {
                        cell.classList.add('visited');
                        if (x === this.currentRoom.x && y === this.currentRoom.y) {
                            cell.classList.add('current');
                            cell.textContent = '@';
                        } else if (x === this.treasureRoom.x && y === this.treasureRoom.y) {
                            cell.classList.add('treasure');
                            cell.textContent = 'üí∞';
                        } else {
                            cell.textContent = '¬∑';
                        }
                    }
                });
            }
        }
        
        // Initialize game
        const game = new SimpleGame();
        game.updateUI();
        
        // Make processCommand global for the button
        window.processCommand = () => game.processCommand();
        EOF
        
    - name: Setup Pages
      uses: actions/configure-pages@v3
      
    - name: Upload artifact
      uses: actions/upload-pages-artifact@v2
      with:
        path: ./web
        
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-web
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v2 
